/*******************************************************************************
 * Copyright (c) 2010, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

#import "PreferencesWindowController+Private.h"

@implementation PreferencesWindowController( Private )

- ( BOOL )isLoginItemEnabled
{
    BOOL                    found;
    UInt32                  seedValue;
    CFURLRef                path;
    LSSharedFileListRef     loginItemsRef;
    CFArrayRef              loginItems;
    id                      loginItem;
    LSSharedFileListItemRef loginItemRef;
    
    found         = NO;
    seedValue     = 0;
    path          = NULL;
    loginItemsRef = LSSharedFileListCreate( NULL, kLSSharedFileListSessionLoginItems, NULL );
    
    if( !loginItemsRef )
    {
        return NO;
    }
    
    loginItems = LSSharedFileListCopySnapshot( loginItemsRef, &seedValue );
    
    #ifdef __clang__
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wcast-qual"
    #endif
    
    for( loginItem in ( NSArray * )loginItems )
    {    
        loginItemRef = ( LSSharedFileListItemRef )loginItem;
        
        if( LSSharedFileListItemResolve( loginItemRef, 0, ( CFURLRef * )&path, NULL ) == noErr )
        {
            if( [ [ ( NSURL * )path path ] hasPrefix: [ [ NSBundle mainBundle ] bundlePath ] ] )
            {
                CFRelease( path );
                
                found = YES;
                
                break;
            }
            
            if( path != NULL )
            {
                CFRelease( path );
            }
        }
    }
    
    #ifdef __clang__
    #pragma clang diagnostic pop
    #endif
    
    if( loginItems != NULL )
    {
        CFRelease( loginItems );
    }

    return found;
}

- ( void )enableLoginItem
{
    CFURLRef                url;
    LSSharedFileListRef     loginItemsRef;
    LSSharedFileListItemRef loginItemRef;
    
    url           = ( CFURLRef )[ NSURL fileURLWithPath: [ [ NSBundle mainBundle ] bundlePath ] ];
    loginItemsRef = LSSharedFileListCreate( NULL, kLSSharedFileListSessionLoginItems, NULL );
    
    if( !loginItemsRef )
    {
        return;
    }
    
	loginItemRef = LSSharedFileListInsertItemURL( loginItemsRef, kLSSharedFileListItemLast, NULL, NULL, url, NULL, NULL );		
	
    if( loginItemRef )
    {
		CFRelease( loginItemRef );
    }
}

- ( void )disableLoginItem
{
    UInt32                  seedValue;
    CFURLRef                path;
    CFArrayRef              loginItems;
    LSSharedFileListRef     loginItemsRef;
    id                      loginItem;
    LSSharedFileListItemRef loginItemRef;
    
    path          = NULL;
    seedValue     = 0;
    loginItemsRef = LSSharedFileListCreate( NULL, kLSSharedFileListSessionLoginItems, NULL );
    
    if( !loginItemsRef )
    {
        return;
    }
    
    loginItems = LSSharedFileListCopySnapshot( loginItemsRef, &seedValue );
    
    #ifdef __clang__
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wcast-qual"
    #endif
    
    for( loginItem in ( NSArray * )loginItems )
    {		
        loginItemRef = ( LSSharedFileListItemRef )loginItem;
        
        if( LSSharedFileListItemResolve( loginItemRef, 0, ( CFURLRef * )&path, NULL ) == noErr )
        {
            if( [ [ ( NSURL * )path path ] hasPrefix: [ [ NSBundle mainBundle ] bundlePath ] ] )
            {
                CFRelease( path );
                LSSharedFileListItemRemove( loginItemsRef, loginItemRef );
                
                break;
            }
            
            if( path != NULL )
            {
                CFRelease( path );
            }
        }		
    }
    
    #ifdef __clang__
    #pragma clang diagnostic pop
    #endif
    
    if( loginItems != NULL )
    {
        CFRelease( loginItems );
    }
}

@end
